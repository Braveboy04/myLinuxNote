/  root权限 
mkdir /work 
chown chandler:chandler /work -R
/work 
sudo su 
sudo cp /work/test /etc  -R
ls -l 


gcc 
 -g -Wall  -O
 -c -I -D -l
-I /wrok/inc/openssl.h 
-D 编译时传入宏定义
gcc -g  main.c -o main 
gcc -g -DDEBUG   main.c -o main 

指定头文件的文件夹
-l 动态链接库
-lpthread
shell 脚本
./configure 
make 
make install 

程序名称  
rm   -rf 

printf  printk


									GDB
命令行调试器
gdb gdbserver



调试器  Linux  命令行的调试方法
四个方面的问题：
	1.启动程序，按照你的想法随心所欲的运行程序
	2.断点调试(条件断点)；
	3.当程序停止时，可以查看程序当前的一切
	4.动态改变程序的执行环境
内存 变量  reg    
地址 栈堆 函数调用栈

ps -A
pid 


gcc -g 
main.c display.c ...

b main.c:18
b display.c:func
info 

段错误--->core


三种GDB启动方式
	1.gdb  test 
	2.gdb  test core 
	3.gdb  test pid
	
	
	
A->B->C
A->C
变量值
寄存器
内存
stack

-g
gdb target


GDB
1.run
2.设置break 可以设置条件断点
3.任何时候停止，并查看当前进程所有的一切
4.动态改变执行环境

命令：
	list  l  查看代码
	break b  设置断点  b 行号/函数名
	info  b  查看断点
	run	  r  运行程序到第一个断点
	next  n  运行下一行 不进入函数
	continue c 跳到下一断点
	print  p  打印某个变量
	bt    函数调用栈
	finish 结束当前函数
	quit  q  退出gdb
	until 或 u 退出循环体
	gdb filename
	gdb filename pid
	examine  x
	gdb>set args 10 20 30 40 50
	  
	如何进行反编译
	disassemble
	disassemble /m _ZN5pointC1Eii（readelf  c++filter看出来的符号表）
	shell +命令
	
	 暂停/恢复程序的方法
	1 断点
		break   b 
		break function
		break offset
		break filename:function /offset
		查看设置的断点  info b
		break *address
		条件断点
		break ...if<condition>
		 int a ,b ,c;
		 funa(a);
		 funb(b);
		 func(c);
		 break func if<a==b>
		 eg: break 20 if i==89
		 
	 2 观察点
		watch  当变量被写入（变化）的时候 就停止程序
		rwatch 当该变量被读取的时候 就停止程序
		awatch  当该变量被访问时 就停止程序
		info watchpoint
		
	 捕捉点
	 信号
	 线程暂停
	 
	 3.捕捉点
		catch 
		1.catch throw
		2.catch exec  捕捉系统发生execve系统调用时 暂停程序
		3.catch fork 
		4.catch vfork
		5.catch load 
		6.catch unload
	
	